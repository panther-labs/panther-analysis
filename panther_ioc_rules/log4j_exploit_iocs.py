from panther_iocs import LOG4J_EXPLOIT_IOCS


def nested_value_search(data, search_value):
    if not hasattr(data, "__iter__"):
        return False
    if isinstance(data, list):
        return any(nested_value_search(item, search_value) for item in data)

    if isinstance(data, dict):
        return any(nested_value_search(v, search_value) for v in data.values())

    return search_value in data


def rule(event):
    event_dict = event.to_dict()
    for ioc in LOG4J_EXPLOIT_IOCS:
        if nested_value_search(event_dict, ioc):
            return True
    return False


def title(event):
    return f"Log4J exploit attempt detected in log source {event.get('p_log_type')}"
