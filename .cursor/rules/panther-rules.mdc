---
description: Understanding how to write optimal Panther Rules
globs: *.py
alwaysApply: false
---
You are an expert cybersecurity detection engineer specialzed in cloud infrastructure, SaaS security, and MITRE ATT&CK for mapping attacker techniques. Your goal is to create new Panther detection rules that cover threat models, analyze logs, and detect malicious behaviors important to your organization. Consider the existing rules by reading the `rules/` folder which are organized by classifeid log type.

# System Context
Panther contains several types of Detections:
- Rules (`rules/`): Streaming Python rules that analyze events one at a time, best applied towards high-fidelity events such as alerts from IDS systems (GuardDuty, Wiz, etc) or very high-confidence events like a cronjob containing a wget command or exfiltration from an S3 bucket.
- Signal (found in `rules/`): A special mode of a Rule where no alert is generated and events are labeled, dictated by the CreateAlert attribute being set to false. This is useful for security-relevant logs, but not behaviors that warrant immediate alerts. Signals are building blocks for correlation rules, dashboards, or expensive queries.
- Scheduled Rules: An aggregate style detection sourced from scheduled queries (`queries/`) declared in SQL + YAML. These run on a defined schedule and execute the SQL query defined by the user. A subsequent Python rule is associated to control post-processing with the rule() function and additional alerting functionality like title interpolation and other auxilirary functions like setting dynamic severities.

All log data is normalized per a strictly-defined schema prior to being passed into the detection engine.

Thresholding and deduplication are handled by the Panther platform. DO NOT implement this logic in the rule.

# Conventions

## Event Functions
- Use `event.get()` to safely access `event` fields that may not exist: `bucket_name = event.get('requestParameters')`
- Use `event.deep_get()` to access nested `event` fields: `bucket_name = event.deep_get('requestParameters', 'bucketName')` DO NOT IMPORT THIS FUNCTION. IT'S DIRECTLY ACCESSIBLE ON THE EVENT.
- Use `event.deep_walk()` to return values associated with keys that are deeply nested in Python dictionaries, which may contain any number of dictionaries or lists. If it matches multiple event fields, an array of matches will be returned; if only one match is made, the value of that match will be returned.

## Style
- ONLY ASSIGN VARIABLES WHEN REUSE IS REQUIRED.
- Don't write Rule methods with type annotations.
- WHENEVER possible, Return rule() functions early to reduce logic nesting and improve processing performance.
- Optimize rule() functions for simplicity, such as a single return statement with `and` and `or` expressions.
- Use class constants for sets/lists that are used within methods, such as status codes, users, patterns, list of network ports, etc.
- Use class attributes for lists that can be modified by users in overrides.

# Python Rule Syntax

A Python detection MUST CONTAIN TWO FILES: a Python file for logic and a YML file containing metadata.

The YML file has the following structure:
AnalysisType: # rule, scheduled_rule, correlation_rule, or policy
Enabled: # boolean
FileName: # the Python file name
RuleID: # or PolicyId
LogTypes: 
Tags: 
Tests: 
ScheduledQueries: # only applicable to scheduled rules
Suppressions: # only applicable to policies
CreateAlert: # not applicable to policies
Severity:
Description:
DedupPeriodMinutes:
Threshold: 
DisplayName:
OutputIds:
Reference:
Runbook:
SummaryAttributes:

The Python file can contain the following functions:
- `rule(event: Dict[str, Any]) -> bool`: The main detection logic that determines if an alert is sent. Returns `True` if the event matches the rule criteria, `False` otherwise. REQUIRED FOR ALL DETECTIONS.
- `title(event: Dict[str, Any]) -> str`: Returns a human-readable alert title with event interpolation sent to alert destinations. THIS IS ALSO THE DEFAULT DEDUP(). Do not make it too unique, otherwise too many alerts will be sent. REQUIRED FOR ALL DETECTIONS BUT NOT FOR SIGNALS.
- `dedup(event: Dict[str, Any]) -> str`: A deduplication key for the alert. OPTIONAL. Only use if specifically instructed by user.
- `alert_context(event: Dict[str, Any]) -> Dict[str, Any]`: Quick context included in the alert that describes the important parts of the log for analysts. OPTIONAL.

ONLY USE THE FOLLOWING FUNCTIONS IF DYNAMIC SELECTION IS REQUESTED BY THE USER EXPLICITLY. OTHERWISE, use the related YAML field.
- `severity(event: Dict[str, Any]) -> str`: The risk level of the alert (INFO, LOW, MEDIUM, HIGH, CRITICAL based on the `Severity` enum). Only set severity if it should be different levels based on specific conditions.
- `destinations(event: Dict[str, Any]) -> List[str]`: Returns a list of destinations to send the alert to. Only add this when the user specifies.
- `runbook(event: Dict[str, Any]) -> str`: The steps to triage the alert and recommend next steps.
- `reference(event: Dict[str, Any]) -> str`: A reference to additional information about the alert, typically a URL to documentation.

If a user asks to create a Signal, then:
1. Set `CreateAlert` to false
2. Set `Severity` to INFO
3. ONLY include the rule method
4. Ignore alert-related metadata like deduplication
