AnalysisType: rule
Filename: unusual_login.py
RuleID: Standard.UnusualLogin
DisplayName: Unusual Login
# This rule is disabled by default because it makes API calls to a third party geolocation
# service. At high rates of log processing, the third party service may throttle requests 
# unless you buy a subscription to it.
Enabled: false
LogTypes:
  - AWS.CloudTrail
  - GSuite.Reports
  - Okta.SystemLog
  - OneLogin.Events
Tags:
  - DataModel
  - Identity & Access Management
Severity: Medium
Description: A user logged in from a new geolocation.
Runbook: >
  Reach out to the user to ensure the login was legitimate.  Be sure to use a means outside the one the unusual login originated from, if one is available. CC an individual that works with the user for visibility, usually the user’s manager if they’re available. The second user is not expected to respond, unless they find the response unusual or the location unexpected.

  To reduce noise, geolocation history length can be configured in the rule body to increase the number of allowed locations per user.
SummaryAttributes:
  - p_any_ip_addresses
Tests:
  -
    Name: AWS.CloudTrail - Successful Login - New Geo - Exceeds History Length of 5
    ExpectedResult: true
    Mocks:
      - objectName: geoinfo_from_ip
        returnValue: >-
                          {
                          "region": "UnitTestRegion",
                          "city": "UnitTestCityNew",
                          "country": "UnitTestCountry"
                          }
      - objectName: get_string_set
        returnValue: >-
                          {'{
                          "UnitTestRegion:UnitTestCity1": "2021-06-04 09:59:53.650801",
                          "UnitTestRegion:UnitTestCity2": "2021-06-04 09:59:53.650802",
                          "UnitTestRegion:UnitTestCity3": "2021-06-04 09:59:53.650803",
                          "UnitTestRegion:UnitTestCity4": "2021-06-04 09:59:53.650804",
                          "UnitTestRegion:UnitTestCity5": "2021-06-04 09:59:53.650805"
                          }'}
      - objectName: put_string_set
        returnValue: >-
    Log:
      {
          "mock": true,
          "userIdentity": {
              "type": "IAMUser",
              "userName": "some_user"
          },
          "eventName": "ConsoleLogin",
          "sourceIPAddress": "111.111.111.111",
          "responseElements": {
              "ConsoleLogin": "Success"
          },
          "p_event_time": "2021-06-04 09:59:53.650807",
          "p_log_type": "AWS.CloudTrail"
      }  
  -
    Name: AWS.CloudTrail - Successful Login - New Geo - Does Not Exceed History Length of 5
    ExpectedResult: true
    Mocks:
      - objectName: geoinfo_from_ip
        returnValue: >-
                          {
                          "region": "UnitTestRegion",
                          "city": "UnitTestCityNew",
                          "country": "UnitTestCountry"
                          }
      - objectName: get_string_set
        returnValue: >-
                       {'{"UnitTestRegion:UnitTestCity": "2021-06-04 09:59:53.650801"}'}
      - objectName: put_string_set
        returnValue: >-
    Log:
      {
          "mock": true,
          "userIdentity": {
              "type": "IAMUser",
              "userName": "some_user"
          },
          "eventName": "ConsoleLogin",
          "sourceIPAddress": "111.111.111.111",
          "responseElements": {
              "ConsoleLogin": "Success"
          },
          "p_event_time": "2021-06-04 09:59:53.650807",
          "p_log_type": "AWS.CloudTrail"
      }  
  -
    Name: AWS.CloudTrail - Successful Login - New Geo - No History
    ExpectedResult: true
    Mocks:
      - objectName: geoinfo_from_ip
        returnValue: >-
                          {
                          "region": "UnitTestRegion",
                          "city": "UnitTestCityNew",
                          "country": "UnitTestCountry"
                          }
      - objectName: get_string_set
        returnValue: >-
      - objectName: put_string_set
        returnValue: >-
    Log:
      {
          "mock": true,
          "userIdentity": {
              "type": "IAMUser",
              "userName": "some_user"
          },
          "eventName": "ConsoleLogin",
          "sourceIPAddress": "111.111.111.111",
          "responseElements": {
              "ConsoleLogin": "Success"
          },
          "p_event_time": "2021-06-04 09:59:53.650807",
          "p_log_type": "AWS.CloudTrail"
      }  
  -
    Name: AWS.CloudTrail - Successful Login - Existing Geo
    ExpectedResult: false
    Mocks:
      - objectName: geoinfo_from_ip
        returnValue: >-
                          {
                          "region": "UnitTestRegion",
                          "city": "UnitTestCity1",
                          "country": "UnitTestCountry"
                          }
      - objectName: get_string_set
        returnValue: >-
                          {'{
                          "UnitTestRegion:UnitTestCity1": "2021-06-04 09:59:53.650801",
                          "UnitTestRegion:UnitTestCity2": "2021-06-04 09:59:53.650802",
                          "UnitTestRegion:UnitTestCity3": "2021-06-04 09:59:53.650803",
                          "UnitTestRegion:UnitTestCity4": "2021-06-04 09:59:53.650804",
                          "UnitTestRegion:UnitTestCity5": "2021-06-04 09:59:53.650805"
                          }'}
      - objectName: put_string_set
        returnValue: >-
    Log:
      {
          "mock": true,
          "userIdentity": {
              "type": "IAMUser",
              "userName": "some_user"
          },
          "eventName": "ConsoleLogin",
          "sourceIPAddress": "111.111.111.111",
          "responseElements": {
              "ConsoleLogin": "Success"
          },
          "p_event_time": "2021-06-04 09:59:53.650807",
          "p_log_type": "AWS.CloudTrail"
      }  
  -
    Name: AWS.CloudTrail - Failed Login
    ExpectedResult: false
    Log:
      {
          "userIdentity": {
              "type": "IAMUser",
              "principalId": "1111",
              "arn": "arn:aws:iam::123456789012:user/tester",
              "accountId": "123456789012",
              "userName": "tester"
          },
          "eventTime": "2019-01-01T00:00:00Z",
          "eventSource": "signin.amazonaws.com",
          "eventName": "ConsoleLogin",
          "awsRegion": "us-east-1",
          "sourceIPAddress": "111.111.111.111",
          "userAgent": "Mozilla",
          "requestParameters": null,
          "responseElements": {
              "ConsoleLogin": "Failure"
          },
          "additionalEventData": {
              "LoginTo": "https://console.aws.amazon.com/console/",
              "MobileVersion": "No",
              "MFAUsed": "No"
          },
          "eventID": "1",
          "eventType": "AwsConsoleSignIn",
          "recipientAccountId": "123456789012",
          "p_event_time": "2021-06-04 09:59:53.650807",
          "p_log_type": "AWS.CloudTrail"
      }  
  - 
    Name: Okta - Non Login
    ExpectedResult: false
    Log:
      {
        "eventType": "logout",
        "p_log_type": "Okta.SystemLog",
      }
  -
    Name: Okta - Failed Login
    ExpectedResult: false
    Log:
      {
        "actor": {
            "alternateId": "admin",
            "displayName": "unknown",
            "id": "unknown",
            "type": "User"
        },
        "client": {
            "ipAddress": "redacted",
        },
        "eventType": "user.session.start",
        "outcome": {
            "reason": "VERIFICATION_ERROR",
            "result": "FAILURE"
        },
        "p_log_type": "Okta.SystemLog",
      }
  -
    Name: OneLogin - Non Login
    ExpectedResult: false
    Log:
      {
        "event_type_id": 8,
        "p_log_type": "OneLogin.Events",
      }
  -
    Name: GSuite - Successful Login Event
    ExpectedResult: true
    Mocks:
      - objectName: geoinfo_from_ip
        returnValue: >-
                          {
                          "region": "UnitTestRegion",
                          "city": "UnitTestCity1",
                          "country": "UnitTestCountry"
                          }
      - objectName: get_string_set
        returnValue: >-
      - objectName: put_string_set
        returnValue: >-
    Log:
      {
        'actor': {
          'email': 'nick@acme.io',
          'profileId': '11949494222400014922'
        },
        'id': {'applicationName': 'login'},
        'ipAddress': '127.0.0.1',
        'events': [
          {
            'type': 'login',
            'name': 'login_success'
          }
        ],
        'p_log_type': 'GSuite.Reports'
      }
